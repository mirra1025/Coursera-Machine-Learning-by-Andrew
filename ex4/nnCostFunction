function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
    % Y - the great trick - we need to recode the labels as vectors containing only values 0 or 1 (page 5 of ex4.pdf)
    I = eye(num_labels);
    Y = zeros(m, num_labels);
    for i=1:m
      Y(i, :)= I(y(i), :);
    end
    
    a1 = [ones(m, 1) X];
    z2 = a1*Theta1';
    % a1:5000*401 Theta1':401*25 a1*Theta1':5000*25
    a2 = [ones(size(z2, 1), 1) sigmoid(z2)];
    z3 = a2*Theta2';
    % a2:5000*26 Theta2':26*10 a2*Theta2'=5000*10
    a3 = sigmoid(z3);
    h = a3;

    J = sum(sum((-Y).*log(h) - (1-Y).*log(1-h) ))/m; % 5000*10

%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
        triangle1 = zeros(size(Theta1));
        triangle2 = zeros(size(Theta2));
        for t = 1:m
            % Step 1
            a1 = [1 X(t,:)]; % 1*401
            z2 = a1*Theta1';
            % a1:1*401 Theta1':401*25 a1*Theta1':1*25
            a2 = [1 sigmoid(z2)]; % 1*26
            z3 = a2*Theta2';
            % a2:1*26 Theta2':26*10 a2*Theta2'=1*10
            a3 = sigmoid(z3);
            h = a3;
            % Step 2
            delta3 = a3 - Y(t,:); % 1*10
            % Step 3
            aa = delta3*Theta2; % 1*10 10*26 = 1*26
            delta2 = aa(2: end) .* sigmoidGradient(z2); % 1*25 1*25 = 1*25
            % Step 4
            triangle1 = triangle1 + (a1' * delta2)'; %  401*1 1*25 = 401*25'= 25*401
            triangle2 = triangle2 + (a2' * delta3)'; %  26*1 1*10 = 26*10'= 10*26
        end
%         Theta1_grad = triangle1 / m;
%         Theta2_grad = triangle2 / m;

%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%
    reg = 1/2 *lambda * (sum(sum(Theta1(:, 2:end).^2)) + sum(sum(Theta2(:, 2:end).^2)))/m;
    J = J + reg;
    
    Theta1_grad = (triangle1 / m) + lambda * [zeros(hidden_layer_size,1) Theta1(:,2:end)] / m;
    Theta2_grad = (triangle2 / m) + lambda * [zeros(num_labels,1) Theta2(:,2:end)] / m;
    
% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
